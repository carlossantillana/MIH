
csant019_FinalLab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000e04  00000e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  0080011c  0080011c  00000eb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000154b  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b43  00000000  00000000  00002587  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d2c  00000000  00000000  000030ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00003df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081f  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000abb  00000000  00000000  000048af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000536a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	85 c0       	rjmp	.+266    	; 0x10c <__ctors_end>
   2:	00 00       	nop
   4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
   6:	00 00       	nop
   8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
   a:	00 00       	nop
   c:	9c c0       	rjmp	.+312    	; 0x146 <__bad_interrupt>
   e:	00 00       	nop
  10:	9a c0       	rjmp	.+308    	; 0x146 <__bad_interrupt>
  12:	00 00       	nop
  14:	98 c0       	rjmp	.+304    	; 0x146 <__bad_interrupt>
  16:	00 00       	nop
  18:	96 c0       	rjmp	.+300    	; 0x146 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
  1e:	00 00       	nop
  20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
  22:	00 00       	nop
  24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
  26:	00 00       	nop
  28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
  32:	00 00       	nop
  34:	eb c0       	rjmp	.+470    	; 0x20c <__vector_13>
  36:	00 00       	nop
  38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
  3e:	00 00       	nop
  40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
  42:	00 00       	nop
  44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
  46:	00 00       	nop
  48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
  52:	00 00       	nop
  54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
  56:	00 00       	nop
  58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
  5e:	00 00       	nop
  60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
  62:	00 00       	nop
  64:	70 c0       	rjmp	.+224    	; 0x146 <__bad_interrupt>
  66:	00 00       	nop
  68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
  72:	00 00       	nop
  74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
  76:	00 00       	nop
  78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
  7e:	00 00       	nop
  80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
  82:	00 00       	nop
  84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
  86:	00 00       	nop
  88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6d 01       	movw	r12, r26
  8e:	77 01       	movw	r14, r14
  90:	38 02       	muls	r19, r24
  92:	98 01       	movw	r18, r16
  94:	c3 01       	movw	r24, r6
  96:	f0 01       	movw	r30, r0
  98:	f7 01       	movw	r30, r14
  9a:	10 02       	muls	r17, r16
  9c:	38 02       	muls	r19, r24
  9e:	4b 02       	muls	r20, r27
  a0:	57 02       	muls	r21, r23
  a2:	a0 02       	muls	r26, r16
  a4:	e8 02       	muls	r30, r24
  a6:	09 03       	fmul	r16, r17

000000a8 <__trampolines_end>:
  a8:	20 21       	and	r18, r0
  aa:	23 25       	eor	r18, r3
  ac:	27 29       	or	r18, r7
  ae:	2a 2c       	mov	r2, r10
  b0:	2e 30       	cpi	r18, 0x0E	; 14
  b2:	32 33       	cpi	r19, 0x32	; 50
  b4:	35 37       	cpi	r19, 0x75	; 117
  b6:	39 3b       	cpi	r19, 0xB9	; 185
  b8:	3c 3e       	cpi	r19, 0xEC	; 236
  ba:	40 42       	sbci	r20, 0x20	; 32
  bc:	44 45       	sbci	r20, 0x54	; 84
  be:	47 49       	sbci	r20, 0x97	; 151
  c0:	4b 4d       	sbci	r20, 0xDB	; 219
  c2:	4e 50       	subi	r20, 0x0E	; 14
  c4:	52 54       	subi	r21, 0x42	; 66
  c6:	56 57       	subi	r21, 0x76	; 118
  c8:	59 5b       	subi	r21, 0xB9	; 185
  ca:	5d 5f       	subi	r21, 0xFD	; 253
  cc:	60 62       	ori	r22, 0x20	; 32
  ce:	64 66       	ori	r22, 0x64	; 100
  d0:	68 69       	ori	r22, 0x98	; 152
  d2:	6b 6d       	ori	r22, 0xDB	; 219
  d4:	6f 71       	andi	r22, 0x1F	; 31
  d6:	72 74       	andi	r23, 0x42	; 66
  d8:	76 78       	andi	r23, 0x86	; 134
  da:	7a 7b       	andi	r23, 0xBA	; 186
  dc:	7d 7f       	andi	r23, 0xFD	; 253
  de:	81 83       	std	Z+1, r24	; 0x01
  e0:	84 86       	std	Z+12, r8	; 0x0c
  e2:	88 8a       	std	Y+16, r8	; 0x10
  e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
  e6:	8f 91       	pop	r24
  e8:	93 95       	inc	r25
  ea:	96 98       	cbi	0x12, 6	; 18
  ec:	9a 9c       	mul	r9, r10
  ee:	9e 9f       	mul	r25, r30
  f0:	a1 a3       	std	Z+33, r26	; 0x21
  f2:	a5 a7       	std	Z+45, r26	; 0x2d
  f4:	a8 aa       	std	Y+48, r10	; 0x30
  f6:	ac ae       	std	Y+60, r10	; 0x3c
  f8:	b0 b1       	in	r27, 0x00	; 0
  fa:	b3 b5       	in	r27, 0x23	; 35
  fc:	b7 b9       	out	0x07, r27	; 7
  fe:	ba bc       	out	0x2a, r11	; 42
 100:	be c0       	rjmp	.+380    	; 0x27e <__vector_13+0x72>
 102:	c2 c3       	rjmp	.+1924   	; 0x888 <main+0xa6>
 104:	c5 c7       	rjmp	.+3978   	; 0x1090 <__data_load_end+0x270>
 106:	c9 cb       	rjmp	.-2158   	; 0xfffff89a <__eeprom_end+0xff7ef89a>
 108:	cc ce       	rjmp	.-616    	; 0xfffffea2 <__eeprom_end+0xff7efea2>
 10a:	d0 d2       	rcall	.+1440   	; 0x6ac <set_PWM_speaker+0x38>

0000010c <__ctors_end>:
 10c:	11 24       	eor	r1, r1
 10e:	1f be       	out	0x3f, r1	; 63
 110:	cf ef       	ldi	r28, 0xFF	; 255
 112:	d0 e4       	ldi	r29, 0x40	; 64
 114:	de bf       	out	0x3e, r29	; 62
 116:	cd bf       	out	0x3d, r28	; 61

00000118 <__do_copy_data>:
 118:	11 e0       	ldi	r17, 0x01	; 1
 11a:	a0 e0       	ldi	r26, 0x00	; 0
 11c:	b1 e0       	ldi	r27, 0x01	; 1
 11e:	e4 e0       	ldi	r30, 0x04	; 4
 120:	fe e0       	ldi	r31, 0x0E	; 14
 122:	00 e0       	ldi	r16, 0x00	; 0
 124:	0b bf       	out	0x3b, r16	; 59
 126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x14>
 128:	07 90       	elpm	r0, Z+
 12a:	0d 92       	st	X+, r0
 12c:	ac 31       	cpi	r26, 0x1C	; 28
 12e:	b1 07       	cpc	r27, r17
 130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0x10>

00000132 <__do_clear_bss>:
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	ac e1       	ldi	r26, 0x1C	; 28
 136:	b1 e0       	ldi	r27, 0x01	; 1
 138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
 13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
 13c:	a8 36       	cpi	r26, 0x68	; 104
 13e:	b2 07       	cpc	r27, r18
 140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
 142:	4f d3       	rcall	.+1694   	; 0x7e2 <main>
 144:	5d c6       	rjmp	.+3258   	; 0xe00 <_exit>

00000146 <__bad_interrupt>:
 146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <SMTick1>:
		if(c==0){return b;}
		a = b;
b = c;
	}
	return 0;
}
 148:	29 b1       	in	r18, 0x09	; 9
 14a:	20 74       	andi	r18, 0x40	; 64
 14c:	20 93 5f 01 	sts	0x015F, r18	; 0x80015f <irInput>
 150:	08 95       	ret

00000152 <SMTick2>:
 152:	ac 01       	movw	r20, r24
 154:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 158:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 15c:	9c 01       	movw	r18, r24
 15e:	36 95       	lsr	r19
 160:	27 95       	ror	r18
 162:	36 95       	lsr	r19
 164:	27 95       	ror	r18
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	28 0f       	add	r18, r24
 170:	39 1f       	adc	r19, r25
 172:	24 5f       	subi	r18, 0xF4	; 244
 174:	31 40       	sbci	r19, 0x01	; 1
 176:	ad ec       	ldi	r26, 0xCD	; 205
 178:	bc ec       	ldi	r27, 0xCC	; 204
 17a:	33 d6       	rcall	.+3174   	; 0xde2 <__umulhisi3>
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	fc 01       	movw	r30, r24
 18a:	ff 27       	eor	r31, r31
 18c:	e8 55       	subi	r30, 0x58	; 88
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	85 91       	lpm	r24, Z+
 192:	94 91       	lpm	r25, Z
 194:	99 27       	eor	r25, r25
 196:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <temperature+0x1>
 19a:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <temperature>
 19e:	ca 01       	movw	r24, r20
 1a0:	08 95       	ret

000001a2 <TimerSet>:
 1a2:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <_avr_timer_M>
 1a6:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <_avr_timer_M+0x1>
 1aa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_M+0x2>
 1ae:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_M+0x3>
 1b2:	60 93 4f 01 	sts	0x014F, r22	; 0x80014f <_avr_timer_cntcurr>
 1b6:	70 93 50 01 	sts	0x0150, r23	; 0x800150 <_avr_timer_cntcurr+0x1>
 1ba:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <_avr_timer_cntcurr+0x2>
 1be:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <_avr_timer_cntcurr+0x3>
 1c2:	08 95       	ret

000001c4 <TimerOn>:
 1c4:	8b e0       	ldi	r24, 0x0B	; 11
 1c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1ca:	8d e7       	ldi	r24, 0x7D	; 125
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1d2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1dc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1e0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1e4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_M>
 1e8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_M+0x1>
 1ec:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_M+0x2>
 1f0:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_M+0x3>
 1f4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <_avr_timer_cntcurr>
 1f8:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <_avr_timer_cntcurr+0x1>
 1fc:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <_avr_timer_cntcurr+0x2>
 200:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <_avr_timer_cntcurr+0x3>
 204:	8f b7       	in	r24, 0x3f	; 63
 206:	80 68       	ori	r24, 0x80	; 128
 208:	8f bf       	out	0x3f, r24	; 63
 20a:	08 95       	ret

0000020c <__vector_13>:
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <_avr_timer_cntcurr>
 222:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <_avr_timer_cntcurr+0x1>
 226:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <_avr_timer_cntcurr+0x2>
 22a:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <_avr_timer_cntcurr+0x3>
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	a1 09       	sbc	r26, r1
 232:	b1 09       	sbc	r27, r1
 234:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <_avr_timer_cntcurr>
 238:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <_avr_timer_cntcurr+0x1>
 23c:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <_avr_timer_cntcurr+0x2>
 240:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <_avr_timer_cntcurr+0x3>
 244:	89 2b       	or	r24, r25
 246:	8a 2b       	or	r24, r26
 248:	8b 2b       	or	r24, r27
 24a:	99 f4       	brne	.+38     	; 0x272 <__vector_13+0x66>
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <TimerFlag>
 252:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_M>
 256:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_M+0x1>
 25a:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_M+0x2>
 25e:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_M+0x3>
 262:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <_avr_timer_cntcurr>
 266:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <_avr_timer_cntcurr+0x1>
 26a:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <_avr_timer_cntcurr+0x2>
 26e:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <_avr_timer_cntcurr+0x3>
 272:	bf 91       	pop	r27
 274:	af 91       	pop	r26
 276:	9f 91       	pop	r25
 278:	8f 91       	pop	r24
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <initUSART>:
 284:	e1 ec       	ldi	r30, 0xC1	; 193
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	88 61       	ori	r24, 0x18	; 24
 28c:	80 83       	st	Z, r24
 28e:	e2 ec       	ldi	r30, 0xC2	; 194
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	86 60       	ori	r24, 0x06	; 6
 296:	80 83       	st	Z, r24
 298:	83 e3       	ldi	r24, 0x33	; 51
 29a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 29e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2a2:	08 95       	ret

000002a4 <USART_Send>:
 2a4:	e0 ec       	ldi	r30, 0xC0	; 192
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	90 81       	ld	r25, Z
 2aa:	95 ff       	sbrs	r25, 5
 2ac:	fd cf       	rjmp	.-6      	; 0x2a8 <USART_Send+0x4>
 2ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2b2:	08 95       	ret

000002b4 <USART_Receive>:
 2b4:	e0 ec       	ldi	r30, 0xC0	; 192
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	88 23       	and	r24, r24
 2bc:	ec f7       	brge	.-6      	; 0x2b8 <USART_Receive+0x4>
 2be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2c2:	08 95       	ret

000002c4 <SMTick3>:
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	ec 01       	movw	r28, r24
 2ca:	87 30       	cpi	r24, 0x07	; 7
 2cc:	91 05       	cpc	r25, r1
 2ce:	08 f0       	brcs	.+2      	; 0x2d2 <SMTick3+0xe>
 2d0:	9f c0       	rjmp	.+318    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 2d2:	fc 01       	movw	r30, r24
 2d4:	ea 5b       	subi	r30, 0xBA	; 186
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	7b c5       	rjmp	.+2806   	; 0xdd0 <__tablejump2__>
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <first.2105>
 2e2:	21 11       	cpse	r18, r1
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <SMTick3+0x24>
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	c9 2f       	mov	r28, r25
 2ea:	d8 2f       	mov	r29, r24
 2ec:	91 c0       	rjmp	.+290    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 2ee:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <bluetoothInput>
 2f2:	8f 7d       	andi	r24, 0xDF	; 223
 2f4:	84 35       	cpi	r24, 0x54	; 84
 2f6:	31 f4       	brne	.+12     	; 0x304 <SMTick3+0x40>
 2f8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <displayAlarm>
 2fc:	88 23       	and	r24, r24
 2fe:	09 f4       	brne	.+2      	; 0x302 <SMTick3+0x3e>
 300:	ca c0       	rjmp	.+404    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 302:	11 c0       	rjmp	.+34     	; 0x326 <SMTick3+0x62>
 304:	81 34       	cpi	r24, 0x41	; 65
 306:	79 f4       	brne	.+30     	; 0x326 <SMTick3+0x62>
 308:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <displayAlarm>
 30c:	81 11       	cpse	r24, r1
 30e:	81 c1       	rjmp	.+770    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 310:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <bluetoothInput>
 314:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <hours+0x1>
 318:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <hours>
 31c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <minutes+0x1>
 320:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <minutes>
 324:	c4 c0       	rjmp	.+392    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 326:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <displayAlarm>
 32a:	81 11       	cpse	r24, r1
 32c:	72 c1       	rjmp	.+740    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 32e:	a0 c0       	rjmp	.+320    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 330:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <bluetoothInput>
 334:	8a 30       	cpi	r24, 0x0A	; 10
 336:	c1 f0       	breq	.+48     	; 0x368 <SMTick3+0xa4>
 338:	8f 7d       	andi	r24, 0xDF	; 223
 33a:	85 34       	cpi	r24, 0x45	; 69
 33c:	31 f0       	breq	.+12     	; 0x34a <SMTick3+0x86>
 33e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <displayAlarm>
 342:	88 23       	and	r24, r24
 344:	09 f4       	brne	.+2      	; 0x348 <SMTick3+0x84>
 346:	b3 c0       	rjmp	.+358    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 348:	64 c1       	rjmp	.+712    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 34a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <displayAlarm>
 34e:	81 11       	cpse	r24, r1
 350:	60 c1       	rjmp	.+704    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 352:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <hours+0x1>
 356:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <hours>
 35a:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <bluetoothInput>
 35e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <first.2105>
 362:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <hourEntered.2107>
 366:	84 c0       	rjmp	.+264    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 368:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <displayAlarm>
 36c:	81 11       	cpse	r24, r1
 36e:	51 c1       	rjmp	.+674    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 370:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <first.2105>
 374:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <bluetoothInput>
 378:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <minutes+0x1>
 37c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <minutes>
 380:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <hourEntered.2107>
 384:	dd c0       	rjmp	.+442    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 386:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <bluetoothInput>
 38a:	8a 30       	cpi	r24, 0x0A	; 10
 38c:	99 f0       	breq	.+38     	; 0x3b4 <SMTick3+0xf0>
 38e:	8f 7d       	andi	r24, 0xDF	; 223
 390:	85 34       	cpi	r24, 0x45	; 69
 392:	29 f0       	breq	.+10     	; 0x39e <SMTick3+0xda>
 394:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <displayAlarm>
 398:	81 11       	cpse	r24, r1
 39a:	13 c0       	rjmp	.+38     	; 0x3c2 <SMTick3+0xfe>
 39c:	1a c0       	rjmp	.+52     	; 0x3d2 <SMTick3+0x10e>
 39e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <displayAlarm>
 3a2:	81 11       	cpse	r24, r1
 3a4:	11 c0       	rjmp	.+34     	; 0x3c8 <SMTick3+0x104>
 3a6:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <minutes+0x1>
 3aa:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <minutes>
 3ae:	c1 e0       	ldi	r28, 0x01	; 1
 3b0:	d0 e0       	ldi	r29, 0x00	; 0
 3b2:	0f c0       	rjmp	.+30     	; 0x3d2 <SMTick3+0x10e>
 3b4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <displayAlarm>
 3b8:	81 11       	cpse	r24, r1
 3ba:	09 c0       	rjmp	.+18     	; 0x3ce <SMTick3+0x10a>
 3bc:	c5 e0       	ldi	r28, 0x05	; 5
 3be:	d0 e0       	ldi	r29, 0x00	; 0
 3c0:	08 c0       	rjmp	.+16     	; 0x3d2 <SMTick3+0x10e>
 3c2:	c6 e0       	ldi	r28, 0x06	; 6
 3c4:	d0 e0       	ldi	r29, 0x00	; 0
 3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <SMTick3+0x10e>
 3c8:	c6 e0       	ldi	r28, 0x06	; 6
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <SMTick3+0x10e>
 3ce:	c6 e0       	ldi	r28, 0x06	; 6
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
 3d2:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <bluetoothInput>
 3d6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <first.2105>
 3da:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <minuteEntered.2106>
 3de:	18 c0       	rjmp	.+48     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3e0:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <displayAlarm>
 3e4:	81 11       	cpse	r24, r1
 3e6:	15 c1       	rjmp	.+554    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 3e8:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <bluetoothInput>
 3ec:	41 c0       	rjmp	.+130    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 3ee:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <irInput>
 3f2:	88 23       	and	r24, r24
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <SMTick3+0x134>
 3f6:	0d c1       	rjmp	.+538    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 3f8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <displayAlarm>
 3fc:	88 23       	and	r24, r24
 3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	08 c1       	rjmp	.+528    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 402:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <initializeAlarm>
 406:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <displayAlarm>
 40a:	80 e8       	ldi	r24, 0x80	; 128
 40c:	88 b9       	out	0x08, r24	; 8
 40e:	08 c0       	rjmp	.+16     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 410:	c7 30       	cpi	r28, 0x07	; 7
 412:	d1 05       	cpc	r29, r1
 414:	08 f0       	brcs	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	07 c1       	rjmp	.+526    	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 418:	fe 01       	movw	r30, r28
 41a:	e3 5b       	subi	r30, 0xB3	; 179
 41c:	ff 4f       	sbci	r31, 0xFF	; 255
 41e:	d8 c4       	rjmp	.+2480   	; 0xdd0 <__tablejump2__>
 420:	80 e8       	ldi	r24, 0x80	; 128
 422:	88 b9       	out	0x08, r24	; 8
 424:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 428:	85 ff       	sbrs	r24, 5
 42a:	03 c0       	rjmp	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <temperature>
 430:	39 df       	rcall	.-398    	; 0x2a4 <USART_Send>
 432:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <initializeAlarm>
 436:	8a e0       	ldi	r24, 0x0A	; 10
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <hours+0x1>
 43e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <hours>
 442:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <bluetoothInput>
 446:	88 e2       	ldi	r24, 0x28	; 40
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <minutes+0x1>
 44e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <minutes>
 452:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <alarmCount+0x1>
 456:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <alarmCount>
 45a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <alarmEnd+0x1>
 45e:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <alarmEnd>
 462:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <minuteEntered.2106>
 466:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <hourEntered.2107>
 46a:	c0 e0       	ldi	r28, 0x00	; 0
 46c:	d0 e0       	ldi	r29, 0x00	; 0
 46e:	f3 c0       	rjmp	.+486    	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 470:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 474:	88 23       	and	r24, r24
 476:	1c f4       	brge	.+6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 478:	1d df       	rcall	.-454    	; 0x2b4 <USART_Receive>
 47a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <bluetoothInput>
 47e:	80 e8       	ldi	r24, 0x80	; 128
 480:	88 b9       	out	0x08, r24	; 8
 482:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 486:	85 ff       	sbrs	r24, 5
 488:	d8 c0       	rjmp	.+432    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 48a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <temperature>
 48e:	0a df       	rcall	.-492    	; 0x2a4 <USART_Send>
 490:	c1 e0       	ldi	r28, 0x01	; 1
 492:	d0 e0       	ldi	r29, 0x00	; 0
 494:	e0 c0       	rjmp	.+448    	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 496:	80 e8       	ldi	r24, 0x80	; 128
 498:	88 b9       	out	0x08, r24	; 8
 49a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 49e:	85 ff       	sbrs	r24, 5
 4a0:	cf c0       	rjmp	.+414    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 4a2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <temperature>
 4a6:	fe de       	rcall	.-516    	; 0x2a4 <USART_Send>
 4a8:	c2 e0       	ldi	r28, 0x02	; 2
 4aa:	d0 e0       	ldi	r29, 0x00	; 0
 4ac:	d4 c0       	rjmp	.+424    	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 4ae:	47 98       	cbi	0x08, 7	; 8
 4b0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <hourEntered.2107>
 4b4:	81 11       	cpse	r24, r1
 4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4bc:	85 ff       	sbrs	r24, 5
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4c0:	88 ec       	ldi	r24, 0xC8	; 200
 4c2:	f0 de       	rcall	.-544    	; 0x2a4 <USART_Send>
 4c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4c8:	88 23       	and	r24, r24
 4ca:	bc f4       	brge	.+46     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4cc:	f3 de       	rcall	.-538    	; 0x2b4 <USART_Receive>
 4ce:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <bluetoothInput>
 4d2:	90 ed       	ldi	r25, 0xD0	; 208
 4d4:	98 0f       	add	r25, r24
 4d6:	9a 30       	cpi	r25, 0x0A	; 10
 4d8:	80 f4       	brcc	.+32     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4da:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <hours>
 4de:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <hours+0x1>
 4e2:	20 53       	subi	r18, 0x30	; 48
 4e4:	31 09       	sbc	r19, r1
 4e6:	a9 01       	movw	r20, r18
 4e8:	48 0f       	add	r20, r24
 4ea:	51 1d       	adc	r21, r1
 4ec:	50 93 67 01 	sts	0x0167, r21	; 0x800167 <hours+0x1>
 4f0:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <hours>
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <hourEntered.2107>
 4fa:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <bluetoothInput>
 4fe:	8a 30       	cpi	r24, 0x0A	; 10
 500:	11 f0       	breq	.+4      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 502:	85 36       	cpi	r24, 0x65	; 101
 504:	39 f4       	brne	.+14     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 506:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 50a:	85 ff       	sbrs	r24, 5
 50c:	03 c0       	rjmp	.+6      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 50e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <hours>
 512:	c8 de       	rcall	.-624    	; 0x2a4 <USART_Send>
 514:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <hours>
 518:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <hours+0x1>
 51c:	40 97       	sbiw	r24, 0x10	; 16
 51e:	08 f4       	brcc	.+2      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 520:	92 c0       	rjmp	.+292    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 522:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 526:	85 ff       	sbrs	r24, 5
 528:	02 c0       	rjmp	.+4      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52a:	8c ed       	ldi	r24, 0xDC	; 220
 52c:	bb de       	rcall	.-650    	; 0x2a4 <USART_Send>
 52e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <hours+0x1>
 532:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <hours>
 536:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <hourEntered.2107>
 53a:	c3 e0       	ldi	r28, 0x03	; 3
 53c:	d0 e0       	ldi	r29, 0x00	; 0
 53e:	8b c0       	rjmp	.+278    	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 540:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <minuteEntered.2106>
 544:	81 11       	cpse	r24, r1
 546:	06 c0       	rjmp	.+12     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 548:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 54c:	85 ff       	sbrs	r24, 5
 54e:	02 c0       	rjmp	.+4      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 550:	89 ec       	ldi	r24, 0xC9	; 201
 552:	a8 de       	rcall	.-688    	; 0x2a4 <USART_Send>
 554:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 558:	88 23       	and	r24, r24
 55a:	bc f4       	brge	.+46     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 55c:	ab de       	rcall	.-682    	; 0x2b4 <USART_Receive>
 55e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <bluetoothInput>
 562:	90 ed       	ldi	r25, 0xD0	; 208
 564:	98 0f       	add	r25, r24
 566:	9a 30       	cpi	r25, 0x0A	; 10
 568:	80 f4       	brcc	.+32     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 56a:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <minutes>
 56e:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <minutes+0x1>
 572:	20 53       	subi	r18, 0x30	; 48
 574:	31 09       	sbc	r19, r1
 576:	a9 01       	movw	r20, r18
 578:	48 0f       	add	r20, r24
 57a:	51 1d       	adc	r21, r1
 57c:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <minutes+0x1>
 580:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <minutes>
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <minuteEntered.2106>
 58a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <bluetoothInput>
 58e:	8a 30       	cpi	r24, 0x0A	; 10
 590:	11 f0       	breq	.+4      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 592:	85 36       	cpi	r24, 0x65	; 101
 594:	39 f4       	brne	.+14     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 596:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 59a:	85 ff       	sbrs	r24, 5
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 59e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <minutes>
 5a2:	80 de       	rcall	.-768    	; 0x2a4 <USART_Send>
 5a4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <minutes>
 5a8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <minutes+0x1>
 5ac:	cc 97       	sbiw	r24, 0x3c	; 60
 5ae:	08 f4       	brcc	.+2      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5b0:	4d c0       	rjmp	.+154    	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 5b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 5b6:	85 ff       	sbrs	r24, 5
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5ba:	8c ed       	ldi	r24, 0xDC	; 220
 5bc:	73 de       	rcall	.-794    	; 0x2a4 <USART_Send>
 5be:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <minutes+0x1>
 5c2:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <minutes>
 5c6:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <minuteEntered.2106>
 5ca:	c4 e0       	ldi	r28, 0x04	; 4
 5cc:	d0 e0       	ldi	r29, 0x00	; 0
 5ce:	43 c0       	rjmp	.+134    	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 5d0:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <alarmCount+0x1>
 5d4:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <alarmCount>
 5d8:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <hours>
 5dc:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <hours+0x1>
 5e0:	2c e3       	ldi	r18, 0x3C	; 60
 5e2:	28 9f       	mul	r18, r24
 5e4:	a0 01       	movw	r20, r0
 5e6:	29 9f       	mul	r18, r25
 5e8:	50 0d       	add	r21, r0
 5ea:	11 24       	eor	r1, r1
 5ec:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <minutes>
 5f0:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <minutes+0x1>
 5f4:	84 0f       	add	r24, r20
 5f6:	95 1f       	adc	r25, r21
 5f8:	28 9f       	mul	r18, r24
 5fa:	a0 01       	movw	r20, r0
 5fc:	29 9f       	mul	r18, r25
 5fe:	50 0d       	add	r21, r0
 600:	11 24       	eor	r1, r1
 602:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <alarmEnd+0x1>
 606:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <alarmEnd>
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <initializeAlarm>
 610:	22 c0       	rjmp	.+68     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 612:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 616:	85 ff       	sbrs	r24, 5
 618:	1c c0       	rjmp	.+56     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
 61a:	47 98       	cbi	0x08, 7	; 8
 61c:	86 e9       	ldi	r24, 0x96	; 150
 61e:	42 de       	rcall	.-892    	; 0x2a4 <USART_Send>
 620:	c6 e0       	ldi	r28, 0x06	; 6
 622:	d0 e0       	ldi	r29, 0x00	; 0
 624:	18 c0       	rjmp	.+48     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 626:	80 e8       	ldi	r24, 0x80	; 128
 628:	88 b9       	out	0x08, r24	; 8
 62a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 62e:	85 ff       	sbrs	r24, 5
 630:	12 c0       	rjmp	.+36     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 632:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <temperature>
 636:	36 de       	rcall	.-916    	; 0x2a4 <USART_Send>
 638:	0e c0       	rjmp	.+28     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 63a:	c1 e0       	ldi	r28, 0x01	; 1
 63c:	d0 e0       	ldi	r29, 0x00	; 0
 63e:	0b c0       	rjmp	.+22     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 640:	c2 e0       	ldi	r28, 0x02	; 2
 642:	d0 e0       	ldi	r29, 0x00	; 0
 644:	08 c0       	rjmp	.+16     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 646:	c3 e0       	ldi	r28, 0x03	; 3
 648:	d0 e0       	ldi	r29, 0x00	; 0
 64a:	05 c0       	rjmp	.+10     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 64c:	c4 e0       	ldi	r28, 0x04	; 4
 64e:	d0 e0       	ldi	r29, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 652:	c6 e0       	ldi	r28, 0x06	; 6
 654:	d0 e0       	ldi	r29, 0x00	; 0
 656:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <first.2105>
 65a:	8f 5f       	subi	r24, 0xFF	; 255
 65c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <first.2105>
 660:	ce 01       	movw	r24, r28
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <ADC_init>:


//Initializes the ADC
void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 668:	ea e7       	ldi	r30, 0x7A	; 122
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	80 6e       	ori	r24, 0xE0	; 224
 670:	80 83       	st	Z, r24
 672:	08 95       	ret

00000674 <set_PWM_speaker>:
}

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM_speaker(double frequency) {
 674:	cf 92       	push	r12
 676:	df 92       	push	r13
 678:	ef 92       	push	r14
 67a:	ff 92       	push	r15
 67c:	6b 01       	movw	r12, r22
 67e:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
 680:	9b 01       	movw	r18, r22
 682:	ac 01       	movw	r20, r24
 684:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <__data_end>
 688:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <__data_end+0x1>
 68c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end+0x2>
 690:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__data_end+0x3>
 694:	c5 d1       	rcall	.+906    	; 0xa20 <__cmpsf2>
 696:	88 23       	and	r24, r24
 698:	09 f4       	brne	.+2      	; 0x69c <set_PWM_speaker+0x28>
 69a:	40 c0       	rjmp	.+128    	; 0x71c <set_PWM_speaker+0xa8>
		if (!frequency) { TCCR0B &= 0x08; } //stops timer/counter
 69c:	20 e0       	ldi	r18, 0x00	; 0
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	a9 01       	movw	r20, r18
 6a2:	c7 01       	movw	r24, r14
 6a4:	b6 01       	movw	r22, r12
 6a6:	bc d1       	rcall	.+888    	; 0xa20 <__cmpsf2>
 6a8:	81 11       	cpse	r24, r1
 6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <set_PWM_speaker+0x40>
 6ac:	85 b5       	in	r24, 0x25	; 37
 6ae:	88 70       	andi	r24, 0x08	; 8
 6b0:	85 bd       	out	0x25, r24	; 37
 6b2:	03 c0       	rjmp	.+6      	; 0x6ba <set_PWM_speaker+0x46>
		else { TCCR0B |= 0x03; } // resumes/continues timer/counter
 6b4:	85 b5       	in	r24, 0x25	; 37
 6b6:	83 60       	ori	r24, 0x03	; 3
 6b8:	85 bd       	out	0x25, r24	; 37
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR0A = 0xFFFF; }
 6ba:	28 e5       	ldi	r18, 0x58	; 88
 6bc:	39 e3       	ldi	r19, 0x39	; 57
 6be:	44 e7       	ldi	r20, 0x74	; 116
 6c0:	5f e3       	ldi	r21, 0x3F	; 63
 6c2:	c7 01       	movw	r24, r14
 6c4:	b6 01       	movw	r22, r12
 6c6:	ac d1       	rcall	.+856    	; 0xa20 <__cmpsf2>
 6c8:	88 23       	and	r24, r24
 6ca:	1c f4       	brge	.+6      	; 0x6d2 <set_PWM_speaker+0x5e>
 6cc:	8f ef       	ldi	r24, 0xFF	; 255
 6ce:	87 bd       	out	0x27, r24	; 39
 6d0:	1c c0       	rjmp	.+56     	; 0x70a <set_PWM_speaker+0x96>
		
		// prevents OCR0A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR0A = 0x0000; }
 6d2:	20 e0       	ldi	r18, 0x00	; 0
 6d4:	34 e2       	ldi	r19, 0x24	; 36
 6d6:	44 ef       	ldi	r20, 0xF4	; 244
 6d8:	56 e4       	ldi	r21, 0x46	; 70
 6da:	c7 01       	movw	r24, r14
 6dc:	b6 01       	movw	r22, r12
 6de:	ef d2       	rcall	.+1502   	; 0xcbe <__gesf2>
 6e0:	18 16       	cp	r1, r24
 6e2:	14 f4       	brge	.+4      	; 0x6e8 <set_PWM_speaker+0x74>
 6e4:	17 bc       	out	0x27, r1	; 39
 6e6:	11 c0       	rjmp	.+34     	; 0x70a <set_PWM_speaker+0x96>
		
		// set OCR3A based on desired frequency
		else { OCR0A = (short)(8000000 / (128 * frequency)) - 1; }
 6e8:	20 e0       	ldi	r18, 0x00	; 0
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	40 e0       	ldi	r20, 0x00	; 0
 6ee:	53 e4       	ldi	r21, 0x43	; 67
 6f0:	c7 01       	movw	r24, r14
 6f2:	b6 01       	movw	r22, r12
 6f4:	e8 d2       	rcall	.+1488   	; 0xcc6 <__mulsf3>
 6f6:	9b 01       	movw	r18, r22
 6f8:	ac 01       	movw	r20, r24
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	74 e2       	ldi	r23, 0x24	; 36
 6fe:	84 ef       	ldi	r24, 0xF4	; 244
 700:	9a e4       	ldi	r25, 0x4A	; 74
 702:	92 d1       	rcall	.+804    	; 0xa28 <__divsf3>
 704:	f9 d1       	rcall	.+1010   	; 0xaf8 <__fixsfsi>
 706:	61 50       	subi	r22, 0x01	; 1
 708:	67 bd       	out	0x27, r22	; 39

		TCNT0 = 0; // resets counter
 70a:	16 bc       	out	0x26, r1	; 38
		current_frequency = frequency; // Updates the current frequency
 70c:	c0 92 1c 01 	sts	0x011C, r12	; 0x80011c <__data_end>
 710:	d0 92 1d 01 	sts	0x011D, r13	; 0x80011d <__data_end+0x1>
 714:	e0 92 1e 01 	sts	0x011E, r14	; 0x80011e <__data_end+0x2>
 718:	f0 92 1f 01 	sts	0x011F, r15	; 0x80011f <__data_end+0x3>
	}
}
 71c:	ff 90       	pop	r15
 71e:	ef 90       	pop	r14
 720:	df 90       	pop	r13
 722:	cf 90       	pop	r12
 724:	08 95       	ret

00000726 <SMTick4>:
}



// Alarm ring
int SMTick4(int state) {//
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	ec 01       	movw	r28, r24
	if (initializeAlarm == 1){
 72c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <initializeAlarm>
 730:	81 30       	cpi	r24, 0x01	; 1
 732:	21 f5       	brne	.+72     	; 0x77c <SMTick4+0x56>
		if (alarmCount >= alarmEnd){
 734:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <alarmCount>
 738:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <alarmCount+0x1>
 73c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <alarmEnd>
 740:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <alarmEnd+0x1>
 744:	28 17       	cp	r18, r24
 746:	39 07       	cpc	r19, r25
 748:	c8 f0       	brcs	.+50     	; 0x77c <SMTick4+0x56>
			PORTC &= 0x7F;// changes from temperature to alarm input newly added
 74a:	47 98       	cbi	0x08, 7	; 8
//Functionality - checks if USART is ready to send
//Parameter: None
//Returns: 1 if true else 0
unsigned char USART_IsSendReady()
{
	return (UCSR0A & (1 << UDRE0));
 74c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
			if(USART_IsSendReady()){
 750:	85 ff       	sbrs	r24, 5
 752:	14 c0       	rjmp	.+40     	; 0x77c <SMTick4+0x56>
				USART_Send(150);
 754:	86 e9       	ldi	r24, 0x96	; 150
 756:	a6 dd       	rcall	.-1204   	; 0x2a4 <USART_Send>
				initializeAlarm = 0;
 758:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <initializeAlarm>
				displayAlarm = 1;
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <displayAlarm>
				}
		}
	}
	if ((alarmCount > (alarmEnd + 60)) && displayAlarm == 1){//newly added
 762:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <alarmEnd>
 766:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <alarmEnd+0x1>
 76a:	cc 96       	adiw	r24, 0x3c	; 60
 76c:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <alarmCount>
 770:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <alarmCount+0x1>
 774:	82 17       	cp	r24, r18
 776:	93 07       	cpc	r25, r19
 778:	88 f0       	brcs	.+34     	; 0x79c <SMTick4+0x76>
 77a:	19 c0       	rjmp	.+50     	; 0x7ae <SMTick4+0x88>
 77c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <alarmEnd>
 780:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <alarmEnd+0x1>
 784:	cc 96       	adiw	r24, 0x3c	; 60
 786:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <alarmCount>
 78a:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <alarmCount+0x1>
 78e:	82 17       	cp	r24, r18
 790:	93 07       	cpc	r25, r19
 792:	68 f4       	brcc	.+26     	; 0x7ae <SMTick4+0x88>
 794:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <displayAlarm>
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	49 f4       	brne	.+18     	; 0x7ae <SMTick4+0x88>
		set_PWM_speaker(scales[1]);
 79c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_start+0x2>
 7a0:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_start+0x3>
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	d8 d1       	rcall	.+944    	; 0xb5a <__floatunsisf>
 7aa:	64 df       	rcall	.-312    	; 0x674 <set_PWM_speaker>
	}
	else{
		set_PWM_speaker(0);
 7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <SMTick4+0x90>
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	cb 01       	movw	r24, r22
	}
	alarmCount++;
 7b4:	5f df       	rcall	.-322    	; 0x674 <set_PWM_speaker>
 7b6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <alarmCount>
 7ba:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <alarmCount+0x1>
 7be:	01 96       	adiw	r24, 0x01	; 1
 7c0:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <alarmCount+0x1>
 7c4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <alarmCount>
	return state;
}
 7c8:	ce 01       	movw	r24, r28
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	08 95       	ret

000007d0 <PWM_on_speaker>:
		current_frequency = frequency; // Updates the current frequency
	}
}

void PWM_on_speaker() {
	TCCR0A = (1 << COM0A0 | 1 << WGM00) ;
 7d0:	81 e4       	ldi	r24, 0x41	; 65
 7d2:	84 bd       	out	0x24, r24	; 36
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR0B = (1 << WGM02) | (1 << CS01) | (1 << CS00);
 7d4:	8b e0       	ldi	r24, 0x0B	; 11
 7d6:	85 bd       	out	0x25, r24	; 37
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM_speaker(0);
 7d8:	60 e0       	ldi	r22, 0x00	; 0
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	cb 01       	movw	r24, r22
 7de:	4a cf       	rjmp	.-364    	; 0x674 <set_PWM_speaker>
 7e0:	08 95       	ret

000007e2 <main>:
	unsigned long int elapsedTime; //Time elapsed since last task tick
	int (*TickFct)(int); //Task tick function
} task;
// -------- Start of main -----------------------------------------------
int main()
{
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	28 97       	sbiw	r28, 0x08	; 8
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	f8 94       	cli
 7f0:	de bf       	out	0x3e, r29	; 62
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	cd bf       	out	0x3d, r28	; 61
// Set Data Direction Registers
// Buttons PORTA[0-7], set AVR PORTA to pull down logic
//0 == input; 1 == output
DDRA = 0x00; PORTA = 0xFF;
 7f6:	11 b8       	out	0x01, r1	; 1
 7f8:	8f ef       	ldi	r24, 0xFF	; 255
 7fa:	82 b9       	out	0x02, r24	; 2
DDRB = 0xFF; PORTB = 0x00;
 7fc:	84 b9       	out	0x04, r24	; 4
 7fe:	15 b8       	out	0x05, r1	; 5
DDRC = 0xFF; PORTC = 0x00;
 800:	87 b9       	out	0x07, r24	; 7
 802:	18 b8       	out	0x08, r1	; 8
DDRD = 0xBF; PORTD = 0x40;
 804:	8f eb       	ldi	r24, 0xBF	; 191
 806:	8a b9       	out	0x0a, r24	; 10
 808:	80 e4       	ldi	r24, 0x40	; 64
 80a:	8b b9       	out	0x0b, r24	; 11
 80c:	0f 2e       	mov	r0, r31
 80e:	f4 e6       	ldi	r31, 0x64	; 100
 810:	df 2e       	mov	r13, r31
 812:	f0 2d       	mov	r31, r0
 814:	c1 2c       	mov	r12, r1
 816:	b1 2c       	mov	r11, r1
 818:	a1 2c       	mov	r10, r1
 81a:	5a e0       	ldi	r21, 0x0A	; 10
 81c:	40 e0       	ldi	r20, 0x00	; 0
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	20 e0       	ldi	r18, 0x00	; 0
 822:	04 c0       	rjmp	.+8      	; 0x82c <main+0x4a>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
b = c;
 824:	d6 2e       	mov	r13, r22
 826:	c7 2e       	mov	r12, r23
 828:	b8 2e       	mov	r11, r24
 82a:	a9 2e       	mov	r10, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 82c:	65 2f       	mov	r22, r21
 82e:	74 2f       	mov	r23, r20
 830:	83 2f       	mov	r24, r19
 832:	92 2f       	mov	r25, r18
 834:	2d 2d       	mov	r18, r13
 836:	3c 2d       	mov	r19, r12
 838:	4b 2d       	mov	r20, r11
 83a:	5a 2d       	mov	r21, r10
 83c:	a7 d2       	rcall	.+1358   	; 0xd8c <__udivmodsi4>
 83e:	5d 2d       	mov	r21, r13
 840:	4c 2d       	mov	r20, r12
 842:	3b 2d       	mov	r19, r11
 844:	2a 2d       	mov	r18, r10
		if(c==0){return b;}
 846:	61 15       	cp	r22, r1
 848:	71 05       	cpc	r23, r1
 84a:	81 05       	cpc	r24, r1
 84c:	91 05       	cpc	r25, r1
 84e:	51 f7       	brne	.-44     	; 0x824 <main+0x42>
 850:	0f 2e       	mov	r0, r31
 852:	f8 ee       	ldi	r31, 0xE8	; 232
 854:	ef 2e       	mov	r14, r31
 856:	f0 2d       	mov	r31, r0
 858:	0f 2e       	mov	r0, r31
 85a:	f3 e0       	ldi	r31, 0x03	; 3
 85c:	ff 2e       	mov	r15, r31
 85e:	f0 2d       	mov	r31, r0
 860:	00 e0       	ldi	r16, 0x00	; 0
 862:	10 e0       	ldi	r17, 0x00	; 0
 864:	04 c0       	rjmp	.+8      	; 0x86e <main+0x8c>
		a = b;
b = c;
 866:	e6 2e       	mov	r14, r22
 868:	f7 2e       	mov	r15, r23
 86a:	08 2f       	mov	r16, r24
 86c:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 86e:	6d 2d       	mov	r22, r13
 870:	7c 2d       	mov	r23, r12
 872:	8b 2d       	mov	r24, r11
 874:	9a 2d       	mov	r25, r10
 876:	2e 2d       	mov	r18, r14
 878:	3f 2d       	mov	r19, r15
 87a:	40 2f       	mov	r20, r16
 87c:	51 2f       	mov	r21, r17
 87e:	86 d2       	rcall	.+1292   	; 0xd8c <__udivmodsi4>
 880:	de 2c       	mov	r13, r14
 882:	cf 2c       	mov	r12, r15
 884:	b0 2e       	mov	r11, r16
 886:	a1 2e       	mov	r10, r17
		if(c==0){return b;}
 888:	61 15       	cp	r22, r1
 88a:	71 05       	cpc	r23, r1
 88c:	81 05       	cpc	r24, r1
 88e:	91 05       	cpc	r25, r1
 890:	51 f7       	brne	.-44     	; 0x866 <main+0x84>

//Greatest common divisor for all tasks or smallest time unit for tasks.
unsigned long int GCD = tmpGCD;

//Recalculate GCD periods for scheduler
unsigned long int SMTick1_period = SMTick1_calc/GCD;
 892:	6a e0       	ldi	r22, 0x0A	; 10
 894:	70 e0       	ldi	r23, 0x00	; 0
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	2e 2d       	mov	r18, r14
 89c:	3f 2d       	mov	r19, r15
 89e:	40 2f       	mov	r20, r16
 8a0:	51 2f       	mov	r21, r17
 8a2:	74 d2       	rcall	.+1256   	; 0xd8c <__udivmodsi4>
 8a4:	49 01       	movw	r8, r18
 8a6:	5a 01       	movw	r10, r20
unsigned long int SMTick2_period = SMTick2_calc/GCD;
unsigned long int SMTick3_period = SMTick3_calc/GCD;
 8a8:	64 e6       	ldi	r22, 0x64	; 100
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	2e 2d       	mov	r18, r14
 8b2:	3f 2d       	mov	r19, r15
 8b4:	40 2f       	mov	r20, r16
 8b6:	51 2f       	mov	r21, r17
 8b8:	69 d2       	rcall	.+1234   	; 0xd8c <__udivmodsi4>
 8ba:	29 01       	movw	r4, r18
 8bc:	3a 01       	movw	r6, r20
unsigned long int SMTick4_period = SMTick4_calc/GCD;
 8be:	68 ee       	ldi	r22, 0xE8	; 232
 8c0:	73 e0       	ldi	r23, 0x03	; 3
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	2e 2d       	mov	r18, r14
 8c8:	3f 2d       	mov	r19, r15
 8ca:	40 2f       	mov	r20, r16
 8cc:	51 2f       	mov	r21, r17
 8ce:	5e d2       	rcall	.+1212   	; 0xd8c <__udivmodsi4>

//Declare an array of tasks 
static task task1, task2, task3, task4;
task *tasks[] = { &task1, &task2, &task3, &task4};
 8d0:	88 e0       	ldi	r24, 0x08	; 8
 8d2:	e4 e1       	ldi	r30, 0x14	; 20
 8d4:	f1 e0       	ldi	r31, 0x01	; 1
 8d6:	de 01       	movw	r26, r28
 8d8:	11 96       	adiw	r26, 0x01	; 1
 8da:	01 90       	ld	r0, Z+
 8dc:	0d 92       	st	X+, r0
 8de:	8a 95       	dec	r24
 8e0:	e1 f7       	brne	.-8      	; 0x8da <main+0xf8>
const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

// Task 1
task1.state = -1;//Task initial state.
 8e2:	e1 e4       	ldi	r30, 0x41	; 65
 8e4:	f1 e0       	ldi	r31, 0x01	; 1
 8e6:	6f ef       	ldi	r22, 0xFF	; 255
 8e8:	60 83       	st	Z, r22
task1.period = SMTick1_period;//Task Period.
 8ea:	81 82       	std	Z+1, r8	; 0x01
 8ec:	92 82       	std	Z+2, r9	; 0x02
 8ee:	a3 82       	std	Z+3, r10	; 0x03
 8f0:	b4 82       	std	Z+4, r11	; 0x04
task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 8f2:	85 82       	std	Z+5, r8	; 0x05
 8f4:	96 82       	std	Z+6, r9	; 0x06
 8f6:	a7 82       	std	Z+7, r10	; 0x07
 8f8:	b0 86       	std	Z+8, r11	; 0x08
task1.TickFct = &SMTick1;//Function pointer for the tick.
 8fa:	84 ea       	ldi	r24, 0xA4	; 164
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	92 87       	std	Z+10, r25	; 0x0a
 900:	81 87       	std	Z+9, r24	; 0x09

// Task 2
task2.state = -1;//Task initial state.
 902:	e6 e3       	ldi	r30, 0x36	; 54
 904:	f1 e0       	ldi	r31, 0x01	; 1
 906:	60 83       	st	Z, r22
task2.period = SMTick2_period;//Task Period.
 908:	81 82       	std	Z+1, r8	; 0x01
 90a:	92 82       	std	Z+2, r9	; 0x02
 90c:	a3 82       	std	Z+3, r10	; 0x03
 90e:	b4 82       	std	Z+4, r11	; 0x04
task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 910:	85 82       	std	Z+5, r8	; 0x05
 912:	96 82       	std	Z+6, r9	; 0x06
 914:	a7 82       	std	Z+7, r10	; 0x07
 916:	b0 86       	std	Z+8, r11	; 0x08
task2.TickFct = &SMTick2;//Function pointer for the tick.
 918:	89 ea       	ldi	r24, 0xA9	; 169
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	92 87       	std	Z+10, r25	; 0x0a
 91e:	81 87       	std	Z+9, r24	; 0x09

// Task 3
task3.state = SM3_init;//Task initial state.
 920:	eb e2       	ldi	r30, 0x2B	; 43
 922:	f1 e0       	ldi	r31, 0x01	; 1
 924:	10 82       	st	Z, r1
task3.period = SMTick3_period;//Task Period.
 926:	41 82       	std	Z+1, r4	; 0x01
 928:	52 82       	std	Z+2, r5	; 0x02
 92a:	63 82       	std	Z+3, r6	; 0x03
 92c:	74 82       	std	Z+4, r7	; 0x04
task3.elapsedTime = SMTick3_period;//Task current elapsed time.
 92e:	45 82       	std	Z+5, r4	; 0x05
 930:	56 82       	std	Z+6, r5	; 0x06
 932:	67 82       	std	Z+7, r6	; 0x07
 934:	70 86       	std	Z+8, r7	; 0x08
task3.TickFct = &SMTick3;//Function pointer for the tick.
 936:	82 e6       	ldi	r24, 0x62	; 98
 938:	91 e0       	ldi	r25, 0x01	; 1
 93a:	92 87       	std	Z+10, r25	; 0x0a
 93c:	81 87       	std	Z+9, r24	; 0x09

// Task 4
task4.state = -1;//Task initial state.
 93e:	e0 e2       	ldi	r30, 0x20	; 32
 940:	f1 e0       	ldi	r31, 0x01	; 1
 942:	60 83       	st	Z, r22
task4.period = SMTick4_period;//Task Period.
 944:	21 83       	std	Z+1, r18	; 0x01
 946:	32 83       	std	Z+2, r19	; 0x02
 948:	43 83       	std	Z+3, r20	; 0x03
 94a:	54 83       	std	Z+4, r21	; 0x04
task4.elapsedTime = SMTick4_period;//Task current elapsed time.
 94c:	25 83       	std	Z+5, r18	; 0x05
 94e:	36 83       	std	Z+6, r19	; 0x06
task4.TickFct = &SMTick4;//Function pointer for the tick.
 950:	47 83       	std	Z+7, r20	; 0x07
 952:	50 87       	std	Z+8, r21	; 0x08


//Initializing functions
initUSART();
 954:	83 e9       	ldi	r24, 0x93	; 147
ADC_init();
 956:	93 e0       	ldi	r25, 0x03	; 3
 958:	92 87       	std	Z+10, r25	; 0x0a
PWM_on_speaker();
 95a:	81 87       	std	Z+9, r24	; 0x09
set_PWM_speaker(0);
 95c:	93 dc       	rcall	.-1754   	; 0x284 <initUSART>
 95e:	84 de       	rcall	.-760    	; 0x668 <ADC_init>
 960:	37 df       	rcall	.-402    	; 0x7d0 <PWM_on_speaker>
TimerSet(GCD);
 962:	60 e0       	ldi	r22, 0x00	; 0
 964:	70 e0       	ldi	r23, 0x00	; 0
 966:	cb 01       	movw	r24, r22
 968:	85 de       	rcall	.-758    	; 0x674 <set_PWM_speaker>
 96a:	6e 2d       	mov	r22, r14
 96c:	7f 2d       	mov	r23, r15
TimerOn();
 96e:	80 2f       	mov	r24, r16
 970:	91 2f       	mov	r25, r17

//Initializing variables
temperature =0;
 972:	17 dc       	rcall	.-2002   	; 0x1a2 <TimerSet>
 974:	27 dc       	rcall	.-1970   	; 0x1c4 <TimerOn>
 976:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <temperature+0x1>
alarmCount=0;
 97a:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <temperature>
 97e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <alarmCount+0x1>
alarmEnd = 20000;
 982:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <alarmCount>
 986:	80 e2       	ldi	r24, 0x20	; 32
 988:	9e e4       	ldi	r25, 0x4E	; 78
 98a:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <alarmEnd+0x1>
timer =0;
 98e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <alarmEnd>
 992:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <timer+0x1>
 996:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <timer>
 99a:	7e 01       	movw	r14, r28
 99c:	89 e0       	ldi	r24, 0x09	; 9
 99e:	e8 0e       	add	r14, r24
 9a0:	f1 1c       	adc	r15, r1
 9a2:	de 01       	movw	r26, r28

while(1) {
	// Scheduler code
	for ( i = 0; i < numTasks; i++ ) {
		// Task is ready to tick
		if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 9a4:	11 96       	adiw	r26, 0x01	; 1
 9a6:	6d 01       	movw	r12, r26
 9a8:	f6 01       	movw	r30, r12
 9aa:	01 91       	ld	r16, Z+
 9ac:	11 91       	ld	r17, Z+
 9ae:	6f 01       	movw	r12, r30
 9b0:	d8 01       	movw	r26, r16
 9b2:	15 96       	adiw	r26, 0x05	; 5
 9b4:	4d 91       	ld	r20, X+
 9b6:	5d 91       	ld	r21, X+
 9b8:	6d 91       	ld	r22, X+
 9ba:	7c 91       	ld	r23, X
 9bc:	18 97       	sbiw	r26, 0x08	; 8
 9be:	11 96       	adiw	r26, 0x01	; 1
 9c0:	8d 91       	ld	r24, X+
 9c2:	9d 91       	ld	r25, X+
 9c4:	0d 90       	ld	r0, X+
 9c6:	bc 91       	ld	r27, X
 9c8:	a0 2d       	mov	r26, r0
 9ca:	48 17       	cp	r20, r24
 9cc:	59 07       	cpc	r21, r25
 9ce:	6a 07       	cpc	r22, r26
			// Setting next state for task
			tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 9d0:	7b 07       	cpc	r23, r27
 9d2:	81 f4       	brne	.+32     	; 0x9f4 <main+0x212>
 9d4:	f8 01       	movw	r30, r16
 9d6:	80 81       	ld	r24, Z
 9d8:	01 84       	ldd	r0, Z+9	; 0x09
 9da:	f2 85       	ldd	r31, Z+10	; 0x0a
 9dc:	e0 2d       	mov	r30, r0
 9de:	08 2e       	mov	r0, r24
 9e0:	00 0c       	add	r0, r0
 9e2:	99 0b       	sbc	r25, r25
 9e4:	09 95       	icall
			// Reset the elapsed time for next tick.
			tasks[i]->elapsedTime = 0;
 9e6:	d8 01       	movw	r26, r16
 9e8:	8c 93       	st	X, r24
 9ea:	f8 01       	movw	r30, r16
 9ec:	15 82       	std	Z+5, r1	; 0x05
 9ee:	16 82       	std	Z+6, r1	; 0x06
		}
		tasks[i]->elapsedTime += 1;
 9f0:	17 82       	std	Z+7, r1	; 0x07
 9f2:	10 86       	std	Z+8, r1	; 0x08
 9f4:	f8 01       	movw	r30, r16
 9f6:	85 81       	ldd	r24, Z+5	; 0x05
 9f8:	96 81       	ldd	r25, Z+6	; 0x06
 9fa:	a7 81       	ldd	r26, Z+7	; 0x07
 9fc:	b0 85       	ldd	r27, Z+8	; 0x08
 9fe:	01 96       	adiw	r24, 0x01	; 1
 a00:	a1 1d       	adc	r26, r1
 a02:	b1 1d       	adc	r27, r1
 a04:	85 83       	std	Z+5, r24	; 0x05
 a06:	96 83       	std	Z+6, r25	; 0x06
timer =0;
unsigned short i; // Scheduler for-loop iterator

while(1) {
	// Scheduler code
	for ( i = 0; i < numTasks; i++ ) {
 a08:	a7 83       	std	Z+7, r26	; 0x07
 a0a:	b0 87       	std	Z+8, r27	; 0x08
 a0c:	ce 14       	cp	r12, r14
			tasks[i]->elapsedTime = 0;
		}
		tasks[i]->elapsedTime += 1;
	}

	while(!TimerFlag);
 a0e:	df 04       	cpc	r13, r15
 a10:	59 f6       	brne	.-106    	; 0x9a8 <main+0x1c6>
 a12:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <TimerFlag>
	TimerFlag = 0;
 a16:	88 23       	and	r24, r24
 a18:	e1 f3       	breq	.-8      	; 0xa12 <main+0x230>
}
 a1a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <TimerFlag>
 a1e:	c1 cf       	rjmp	.-126    	; 0x9a2 <main+0x1c0>

00000a20 <__cmpsf2>:
 a20:	d9 d0       	rcall	.+434    	; 0xbd4 <__fp_cmp>
 a22:	08 f4       	brcc	.+2      	; 0xa26 <__cmpsf2+0x6>
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	08 95       	ret

00000a28 <__divsf3>:
 a28:	0c d0       	rcall	.+24     	; 0xa42 <__divsf3x>
 a2a:	0f c1       	rjmp	.+542    	; 0xc4a <__fp_round>
 a2c:	07 d1       	rcall	.+526    	; 0xc3c <__fp_pscB>
 a2e:	40 f0       	brcs	.+16     	; 0xa40 <__divsf3+0x18>
 a30:	fe d0       	rcall	.+508    	; 0xc2e <__fp_pscA>
 a32:	30 f0       	brcs	.+12     	; 0xa40 <__divsf3+0x18>
 a34:	21 f4       	brne	.+8      	; 0xa3e <__divsf3+0x16>
 a36:	5f 3f       	cpi	r21, 0xFF	; 255
 a38:	19 f0       	breq	.+6      	; 0xa40 <__divsf3+0x18>
 a3a:	f0 c0       	rjmp	.+480    	; 0xc1c <__fp_inf>
 a3c:	51 11       	cpse	r21, r1
 a3e:	39 c1       	rjmp	.+626    	; 0xcb2 <__fp_szero>
 a40:	f3 c0       	rjmp	.+486    	; 0xc28 <__fp_nan>

00000a42 <__divsf3x>:
 a42:	14 d1       	rcall	.+552    	; 0xc6c <__fp_split3>
 a44:	98 f3       	brcs	.-26     	; 0xa2c <__divsf3+0x4>

00000a46 <__divsf3_pse>:
 a46:	99 23       	and	r25, r25
 a48:	c9 f3       	breq	.-14     	; 0xa3c <__divsf3+0x14>
 a4a:	55 23       	and	r21, r21
 a4c:	b1 f3       	breq	.-20     	; 0xa3a <__divsf3+0x12>
 a4e:	95 1b       	sub	r25, r21
 a50:	55 0b       	sbc	r21, r21
 a52:	bb 27       	eor	r27, r27
 a54:	aa 27       	eor	r26, r26
 a56:	62 17       	cp	r22, r18
 a58:	73 07       	cpc	r23, r19
 a5a:	84 07       	cpc	r24, r20
 a5c:	38 f0       	brcs	.+14     	; 0xa6c <__divsf3_pse+0x26>
 a5e:	9f 5f       	subi	r25, 0xFF	; 255
 a60:	5f 4f       	sbci	r21, 0xFF	; 255
 a62:	22 0f       	add	r18, r18
 a64:	33 1f       	adc	r19, r19
 a66:	44 1f       	adc	r20, r20
 a68:	aa 1f       	adc	r26, r26
 a6a:	a9 f3       	breq	.-22     	; 0xa56 <__divsf3_pse+0x10>
 a6c:	33 d0       	rcall	.+102    	; 0xad4 <__divsf3_pse+0x8e>
 a6e:	0e 2e       	mov	r0, r30
 a70:	3a f0       	brmi	.+14     	; 0xa80 <__divsf3_pse+0x3a>
 a72:	e0 e8       	ldi	r30, 0x80	; 128
 a74:	30 d0       	rcall	.+96     	; 0xad6 <__divsf3_pse+0x90>
 a76:	91 50       	subi	r25, 0x01	; 1
 a78:	50 40       	sbci	r21, 0x00	; 0
 a7a:	e6 95       	lsr	r30
 a7c:	00 1c       	adc	r0, r0
 a7e:	ca f7       	brpl	.-14     	; 0xa72 <__divsf3_pse+0x2c>
 a80:	29 d0       	rcall	.+82     	; 0xad4 <__divsf3_pse+0x8e>
 a82:	fe 2f       	mov	r31, r30
 a84:	27 d0       	rcall	.+78     	; 0xad4 <__divsf3_pse+0x8e>
 a86:	66 0f       	add	r22, r22
 a88:	77 1f       	adc	r23, r23
 a8a:	88 1f       	adc	r24, r24
 a8c:	bb 1f       	adc	r27, r27
 a8e:	26 17       	cp	r18, r22
 a90:	37 07       	cpc	r19, r23
 a92:	48 07       	cpc	r20, r24
 a94:	ab 07       	cpc	r26, r27
 a96:	b0 e8       	ldi	r27, 0x80	; 128
 a98:	09 f0       	breq	.+2      	; 0xa9c <__divsf3_pse+0x56>
 a9a:	bb 0b       	sbc	r27, r27
 a9c:	80 2d       	mov	r24, r0
 a9e:	bf 01       	movw	r22, r30
 aa0:	ff 27       	eor	r31, r31
 aa2:	93 58       	subi	r25, 0x83	; 131
 aa4:	5f 4f       	sbci	r21, 0xFF	; 255
 aa6:	2a f0       	brmi	.+10     	; 0xab2 <__divsf3_pse+0x6c>
 aa8:	9e 3f       	cpi	r25, 0xFE	; 254
 aaa:	51 05       	cpc	r21, r1
 aac:	68 f0       	brcs	.+26     	; 0xac8 <__divsf3_pse+0x82>
 aae:	b6 c0       	rjmp	.+364    	; 0xc1c <__fp_inf>
 ab0:	00 c1       	rjmp	.+512    	; 0xcb2 <__fp_szero>
 ab2:	5f 3f       	cpi	r21, 0xFF	; 255
 ab4:	ec f3       	brlt	.-6      	; 0xab0 <__divsf3_pse+0x6a>
 ab6:	98 3e       	cpi	r25, 0xE8	; 232
 ab8:	dc f3       	brlt	.-10     	; 0xab0 <__divsf3_pse+0x6a>
 aba:	86 95       	lsr	r24
 abc:	77 95       	ror	r23
 abe:	67 95       	ror	r22
 ac0:	b7 95       	ror	r27
 ac2:	f7 95       	ror	r31
 ac4:	9f 5f       	subi	r25, 0xFF	; 255
 ac6:	c9 f7       	brne	.-14     	; 0xaba <__divsf3_pse+0x74>
 ac8:	88 0f       	add	r24, r24
 aca:	91 1d       	adc	r25, r1
 acc:	96 95       	lsr	r25
 ace:	87 95       	ror	r24
 ad0:	97 f9       	bld	r25, 7
 ad2:	08 95       	ret
 ad4:	e1 e0       	ldi	r30, 0x01	; 1
 ad6:	66 0f       	add	r22, r22
 ad8:	77 1f       	adc	r23, r23
 ada:	88 1f       	adc	r24, r24
 adc:	bb 1f       	adc	r27, r27
 ade:	62 17       	cp	r22, r18
 ae0:	73 07       	cpc	r23, r19
 ae2:	84 07       	cpc	r24, r20
 ae4:	ba 07       	cpc	r27, r26
 ae6:	20 f0       	brcs	.+8      	; 0xaf0 <__divsf3_pse+0xaa>
 ae8:	62 1b       	sub	r22, r18
 aea:	73 0b       	sbc	r23, r19
 aec:	84 0b       	sbc	r24, r20
 aee:	ba 0b       	sbc	r27, r26
 af0:	ee 1f       	adc	r30, r30
 af2:	88 f7       	brcc	.-30     	; 0xad6 <__divsf3_pse+0x90>
 af4:	e0 95       	com	r30
 af6:	08 95       	ret

00000af8 <__fixsfsi>:
 af8:	04 d0       	rcall	.+8      	; 0xb02 <__fixunssfsi>
 afa:	68 94       	set
 afc:	b1 11       	cpse	r27, r1
 afe:	d9 c0       	rjmp	.+434    	; 0xcb2 <__fp_szero>
 b00:	08 95       	ret

00000b02 <__fixunssfsi>:
 b02:	bc d0       	rcall	.+376    	; 0xc7c <__fp_splitA>
 b04:	88 f0       	brcs	.+34     	; 0xb28 <__fixunssfsi+0x26>
 b06:	9f 57       	subi	r25, 0x7F	; 127
 b08:	90 f0       	brcs	.+36     	; 0xb2e <__fixunssfsi+0x2c>
 b0a:	b9 2f       	mov	r27, r25
 b0c:	99 27       	eor	r25, r25
 b0e:	b7 51       	subi	r27, 0x17	; 23
 b10:	a0 f0       	brcs	.+40     	; 0xb3a <__fixunssfsi+0x38>
 b12:	d1 f0       	breq	.+52     	; 0xb48 <__fixunssfsi+0x46>
 b14:	66 0f       	add	r22, r22
 b16:	77 1f       	adc	r23, r23
 b18:	88 1f       	adc	r24, r24
 b1a:	99 1f       	adc	r25, r25
 b1c:	1a f0       	brmi	.+6      	; 0xb24 <__fixunssfsi+0x22>
 b1e:	ba 95       	dec	r27
 b20:	c9 f7       	brne	.-14     	; 0xb14 <__fixunssfsi+0x12>
 b22:	12 c0       	rjmp	.+36     	; 0xb48 <__fixunssfsi+0x46>
 b24:	b1 30       	cpi	r27, 0x01	; 1
 b26:	81 f0       	breq	.+32     	; 0xb48 <__fixunssfsi+0x46>
 b28:	c3 d0       	rcall	.+390    	; 0xcb0 <__fp_zero>
 b2a:	b1 e0       	ldi	r27, 0x01	; 1
 b2c:	08 95       	ret
 b2e:	c0 c0       	rjmp	.+384    	; 0xcb0 <__fp_zero>
 b30:	67 2f       	mov	r22, r23
 b32:	78 2f       	mov	r23, r24
 b34:	88 27       	eor	r24, r24
 b36:	b8 5f       	subi	r27, 0xF8	; 248
 b38:	39 f0       	breq	.+14     	; 0xb48 <__fixunssfsi+0x46>
 b3a:	b9 3f       	cpi	r27, 0xF9	; 249
 b3c:	cc f3       	brlt	.-14     	; 0xb30 <__fixunssfsi+0x2e>
 b3e:	86 95       	lsr	r24
 b40:	77 95       	ror	r23
 b42:	67 95       	ror	r22
 b44:	b3 95       	inc	r27
 b46:	d9 f7       	brne	.-10     	; 0xb3e <__fixunssfsi+0x3c>
 b48:	3e f4       	brtc	.+14     	; 0xb58 <__fixunssfsi+0x56>
 b4a:	90 95       	com	r25
 b4c:	80 95       	com	r24
 b4e:	70 95       	com	r23
 b50:	61 95       	neg	r22
 b52:	7f 4f       	sbci	r23, 0xFF	; 255
 b54:	8f 4f       	sbci	r24, 0xFF	; 255
 b56:	9f 4f       	sbci	r25, 0xFF	; 255
 b58:	08 95       	ret

00000b5a <__floatunsisf>:
 b5a:	e8 94       	clt
 b5c:	09 c0       	rjmp	.+18     	; 0xb70 <__floatsisf+0x12>

00000b5e <__floatsisf>:
 b5e:	97 fb       	bst	r25, 7
 b60:	3e f4       	brtc	.+14     	; 0xb70 <__floatsisf+0x12>
 b62:	90 95       	com	r25
 b64:	80 95       	com	r24
 b66:	70 95       	com	r23
 b68:	61 95       	neg	r22
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255
 b6c:	8f 4f       	sbci	r24, 0xFF	; 255
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	99 23       	and	r25, r25
 b72:	a9 f0       	breq	.+42     	; 0xb9e <__floatsisf+0x40>
 b74:	f9 2f       	mov	r31, r25
 b76:	96 e9       	ldi	r25, 0x96	; 150
 b78:	bb 27       	eor	r27, r27
 b7a:	93 95       	inc	r25
 b7c:	f6 95       	lsr	r31
 b7e:	87 95       	ror	r24
 b80:	77 95       	ror	r23
 b82:	67 95       	ror	r22
 b84:	b7 95       	ror	r27
 b86:	f1 11       	cpse	r31, r1
 b88:	f8 cf       	rjmp	.-16     	; 0xb7a <__floatsisf+0x1c>
 b8a:	fa f4       	brpl	.+62     	; 0xbca <__floatsisf+0x6c>
 b8c:	bb 0f       	add	r27, r27
 b8e:	11 f4       	brne	.+4      	; 0xb94 <__floatsisf+0x36>
 b90:	60 ff       	sbrs	r22, 0
 b92:	1b c0       	rjmp	.+54     	; 0xbca <__floatsisf+0x6c>
 b94:	6f 5f       	subi	r22, 0xFF	; 255
 b96:	7f 4f       	sbci	r23, 0xFF	; 255
 b98:	8f 4f       	sbci	r24, 0xFF	; 255
 b9a:	9f 4f       	sbci	r25, 0xFF	; 255
 b9c:	16 c0       	rjmp	.+44     	; 0xbca <__floatsisf+0x6c>
 b9e:	88 23       	and	r24, r24
 ba0:	11 f0       	breq	.+4      	; 0xba6 <__floatsisf+0x48>
 ba2:	96 e9       	ldi	r25, 0x96	; 150
 ba4:	11 c0       	rjmp	.+34     	; 0xbc8 <__floatsisf+0x6a>
 ba6:	77 23       	and	r23, r23
 ba8:	21 f0       	breq	.+8      	; 0xbb2 <__floatsisf+0x54>
 baa:	9e e8       	ldi	r25, 0x8E	; 142
 bac:	87 2f       	mov	r24, r23
 bae:	76 2f       	mov	r23, r22
 bb0:	05 c0       	rjmp	.+10     	; 0xbbc <__floatsisf+0x5e>
 bb2:	66 23       	and	r22, r22
 bb4:	71 f0       	breq	.+28     	; 0xbd2 <__floatsisf+0x74>
 bb6:	96 e8       	ldi	r25, 0x86	; 134
 bb8:	86 2f       	mov	r24, r22
 bba:	70 e0       	ldi	r23, 0x00	; 0
 bbc:	60 e0       	ldi	r22, 0x00	; 0
 bbe:	2a f0       	brmi	.+10     	; 0xbca <__floatsisf+0x6c>
 bc0:	9a 95       	dec	r25
 bc2:	66 0f       	add	r22, r22
 bc4:	77 1f       	adc	r23, r23
 bc6:	88 1f       	adc	r24, r24
 bc8:	da f7       	brpl	.-10     	; 0xbc0 <__floatsisf+0x62>
 bca:	88 0f       	add	r24, r24
 bcc:	96 95       	lsr	r25
 bce:	87 95       	ror	r24
 bd0:	97 f9       	bld	r25, 7
 bd2:	08 95       	ret

00000bd4 <__fp_cmp>:
 bd4:	99 0f       	add	r25, r25
 bd6:	00 08       	sbc	r0, r0
 bd8:	55 0f       	add	r21, r21
 bda:	aa 0b       	sbc	r26, r26
 bdc:	e0 e8       	ldi	r30, 0x80	; 128
 bde:	fe ef       	ldi	r31, 0xFE	; 254
 be0:	16 16       	cp	r1, r22
 be2:	17 06       	cpc	r1, r23
 be4:	e8 07       	cpc	r30, r24
 be6:	f9 07       	cpc	r31, r25
 be8:	c0 f0       	brcs	.+48     	; 0xc1a <__fp_cmp+0x46>
 bea:	12 16       	cp	r1, r18
 bec:	13 06       	cpc	r1, r19
 bee:	e4 07       	cpc	r30, r20
 bf0:	f5 07       	cpc	r31, r21
 bf2:	98 f0       	brcs	.+38     	; 0xc1a <__fp_cmp+0x46>
 bf4:	62 1b       	sub	r22, r18
 bf6:	73 0b       	sbc	r23, r19
 bf8:	84 0b       	sbc	r24, r20
 bfa:	95 0b       	sbc	r25, r21
 bfc:	39 f4       	brne	.+14     	; 0xc0c <__fp_cmp+0x38>
 bfe:	0a 26       	eor	r0, r26
 c00:	61 f0       	breq	.+24     	; 0xc1a <__fp_cmp+0x46>
 c02:	23 2b       	or	r18, r19
 c04:	24 2b       	or	r18, r20
 c06:	25 2b       	or	r18, r21
 c08:	21 f4       	brne	.+8      	; 0xc12 <__fp_cmp+0x3e>
 c0a:	08 95       	ret
 c0c:	0a 26       	eor	r0, r26
 c0e:	09 f4       	brne	.+2      	; 0xc12 <__fp_cmp+0x3e>
 c10:	a1 40       	sbci	r26, 0x01	; 1
 c12:	a6 95       	lsr	r26
 c14:	8f ef       	ldi	r24, 0xFF	; 255
 c16:	81 1d       	adc	r24, r1
 c18:	81 1d       	adc	r24, r1
 c1a:	08 95       	ret

00000c1c <__fp_inf>:
 c1c:	97 f9       	bld	r25, 7
 c1e:	9f 67       	ori	r25, 0x7F	; 127
 c20:	80 e8       	ldi	r24, 0x80	; 128
 c22:	70 e0       	ldi	r23, 0x00	; 0
 c24:	60 e0       	ldi	r22, 0x00	; 0
 c26:	08 95       	ret

00000c28 <__fp_nan>:
 c28:	9f ef       	ldi	r25, 0xFF	; 255
 c2a:	80 ec       	ldi	r24, 0xC0	; 192
 c2c:	08 95       	ret

00000c2e <__fp_pscA>:
 c2e:	00 24       	eor	r0, r0
 c30:	0a 94       	dec	r0
 c32:	16 16       	cp	r1, r22
 c34:	17 06       	cpc	r1, r23
 c36:	18 06       	cpc	r1, r24
 c38:	09 06       	cpc	r0, r25
 c3a:	08 95       	ret

00000c3c <__fp_pscB>:
 c3c:	00 24       	eor	r0, r0
 c3e:	0a 94       	dec	r0
 c40:	12 16       	cp	r1, r18
 c42:	13 06       	cpc	r1, r19
 c44:	14 06       	cpc	r1, r20
 c46:	05 06       	cpc	r0, r21
 c48:	08 95       	ret

00000c4a <__fp_round>:
 c4a:	09 2e       	mov	r0, r25
 c4c:	03 94       	inc	r0
 c4e:	00 0c       	add	r0, r0
 c50:	11 f4       	brne	.+4      	; 0xc56 <__fp_round+0xc>
 c52:	88 23       	and	r24, r24
 c54:	52 f0       	brmi	.+20     	; 0xc6a <__fp_round+0x20>
 c56:	bb 0f       	add	r27, r27
 c58:	40 f4       	brcc	.+16     	; 0xc6a <__fp_round+0x20>
 c5a:	bf 2b       	or	r27, r31
 c5c:	11 f4       	brne	.+4      	; 0xc62 <__fp_round+0x18>
 c5e:	60 ff       	sbrs	r22, 0
 c60:	04 c0       	rjmp	.+8      	; 0xc6a <__fp_round+0x20>
 c62:	6f 5f       	subi	r22, 0xFF	; 255
 c64:	7f 4f       	sbci	r23, 0xFF	; 255
 c66:	8f 4f       	sbci	r24, 0xFF	; 255
 c68:	9f 4f       	sbci	r25, 0xFF	; 255
 c6a:	08 95       	ret

00000c6c <__fp_split3>:
 c6c:	57 fd       	sbrc	r21, 7
 c6e:	90 58       	subi	r25, 0x80	; 128
 c70:	44 0f       	add	r20, r20
 c72:	55 1f       	adc	r21, r21
 c74:	59 f0       	breq	.+22     	; 0xc8c <__fp_splitA+0x10>
 c76:	5f 3f       	cpi	r21, 0xFF	; 255
 c78:	71 f0       	breq	.+28     	; 0xc96 <__fp_splitA+0x1a>
 c7a:	47 95       	ror	r20

00000c7c <__fp_splitA>:
 c7c:	88 0f       	add	r24, r24
 c7e:	97 fb       	bst	r25, 7
 c80:	99 1f       	adc	r25, r25
 c82:	61 f0       	breq	.+24     	; 0xc9c <__fp_splitA+0x20>
 c84:	9f 3f       	cpi	r25, 0xFF	; 255
 c86:	79 f0       	breq	.+30     	; 0xca6 <__fp_splitA+0x2a>
 c88:	87 95       	ror	r24
 c8a:	08 95       	ret
 c8c:	12 16       	cp	r1, r18
 c8e:	13 06       	cpc	r1, r19
 c90:	14 06       	cpc	r1, r20
 c92:	55 1f       	adc	r21, r21
 c94:	f2 cf       	rjmp	.-28     	; 0xc7a <__fp_split3+0xe>
 c96:	46 95       	lsr	r20
 c98:	f1 df       	rcall	.-30     	; 0xc7c <__fp_splitA>
 c9a:	08 c0       	rjmp	.+16     	; 0xcac <__fp_splitA+0x30>
 c9c:	16 16       	cp	r1, r22
 c9e:	17 06       	cpc	r1, r23
 ca0:	18 06       	cpc	r1, r24
 ca2:	99 1f       	adc	r25, r25
 ca4:	f1 cf       	rjmp	.-30     	; 0xc88 <__fp_splitA+0xc>
 ca6:	86 95       	lsr	r24
 ca8:	71 05       	cpc	r23, r1
 caa:	61 05       	cpc	r22, r1
 cac:	08 94       	sec
 cae:	08 95       	ret

00000cb0 <__fp_zero>:
 cb0:	e8 94       	clt

00000cb2 <__fp_szero>:
 cb2:	bb 27       	eor	r27, r27
 cb4:	66 27       	eor	r22, r22
 cb6:	77 27       	eor	r23, r23
 cb8:	cb 01       	movw	r24, r22
 cba:	97 f9       	bld	r25, 7
 cbc:	08 95       	ret

00000cbe <__gesf2>:
 cbe:	8a df       	rcall	.-236    	; 0xbd4 <__fp_cmp>
 cc0:	08 f4       	brcc	.+2      	; 0xcc4 <__gesf2+0x6>
 cc2:	8f ef       	ldi	r24, 0xFF	; 255
 cc4:	08 95       	ret

00000cc6 <__mulsf3>:
 cc6:	0b d0       	rcall	.+22     	; 0xcde <__mulsf3x>
 cc8:	c0 cf       	rjmp	.-128    	; 0xc4a <__fp_round>
 cca:	b1 df       	rcall	.-158    	; 0xc2e <__fp_pscA>
 ccc:	28 f0       	brcs	.+10     	; 0xcd8 <__mulsf3+0x12>
 cce:	b6 df       	rcall	.-148    	; 0xc3c <__fp_pscB>
 cd0:	18 f0       	brcs	.+6      	; 0xcd8 <__mulsf3+0x12>
 cd2:	95 23       	and	r25, r21
 cd4:	09 f0       	breq	.+2      	; 0xcd8 <__mulsf3+0x12>
 cd6:	a2 cf       	rjmp	.-188    	; 0xc1c <__fp_inf>
 cd8:	a7 cf       	rjmp	.-178    	; 0xc28 <__fp_nan>
 cda:	11 24       	eor	r1, r1
 cdc:	ea cf       	rjmp	.-44     	; 0xcb2 <__fp_szero>

00000cde <__mulsf3x>:
 cde:	c6 df       	rcall	.-116    	; 0xc6c <__fp_split3>
 ce0:	a0 f3       	brcs	.-24     	; 0xcca <__mulsf3+0x4>

00000ce2 <__mulsf3_pse>:
 ce2:	95 9f       	mul	r25, r21
 ce4:	d1 f3       	breq	.-12     	; 0xcda <__mulsf3+0x14>
 ce6:	95 0f       	add	r25, r21
 ce8:	50 e0       	ldi	r21, 0x00	; 0
 cea:	55 1f       	adc	r21, r21
 cec:	62 9f       	mul	r22, r18
 cee:	f0 01       	movw	r30, r0
 cf0:	72 9f       	mul	r23, r18
 cf2:	bb 27       	eor	r27, r27
 cf4:	f0 0d       	add	r31, r0
 cf6:	b1 1d       	adc	r27, r1
 cf8:	63 9f       	mul	r22, r19
 cfa:	aa 27       	eor	r26, r26
 cfc:	f0 0d       	add	r31, r0
 cfe:	b1 1d       	adc	r27, r1
 d00:	aa 1f       	adc	r26, r26
 d02:	64 9f       	mul	r22, r20
 d04:	66 27       	eor	r22, r22
 d06:	b0 0d       	add	r27, r0
 d08:	a1 1d       	adc	r26, r1
 d0a:	66 1f       	adc	r22, r22
 d0c:	82 9f       	mul	r24, r18
 d0e:	22 27       	eor	r18, r18
 d10:	b0 0d       	add	r27, r0
 d12:	a1 1d       	adc	r26, r1
 d14:	62 1f       	adc	r22, r18
 d16:	73 9f       	mul	r23, r19
 d18:	b0 0d       	add	r27, r0
 d1a:	a1 1d       	adc	r26, r1
 d1c:	62 1f       	adc	r22, r18
 d1e:	83 9f       	mul	r24, r19
 d20:	a0 0d       	add	r26, r0
 d22:	61 1d       	adc	r22, r1
 d24:	22 1f       	adc	r18, r18
 d26:	74 9f       	mul	r23, r20
 d28:	33 27       	eor	r19, r19
 d2a:	a0 0d       	add	r26, r0
 d2c:	61 1d       	adc	r22, r1
 d2e:	23 1f       	adc	r18, r19
 d30:	84 9f       	mul	r24, r20
 d32:	60 0d       	add	r22, r0
 d34:	21 1d       	adc	r18, r1
 d36:	82 2f       	mov	r24, r18
 d38:	76 2f       	mov	r23, r22
 d3a:	6a 2f       	mov	r22, r26
 d3c:	11 24       	eor	r1, r1
 d3e:	9f 57       	subi	r25, 0x7F	; 127
 d40:	50 40       	sbci	r21, 0x00	; 0
 d42:	8a f0       	brmi	.+34     	; 0xd66 <__mulsf3_pse+0x84>
 d44:	e1 f0       	breq	.+56     	; 0xd7e <__mulsf3_pse+0x9c>
 d46:	88 23       	and	r24, r24
 d48:	4a f0       	brmi	.+18     	; 0xd5c <__mulsf3_pse+0x7a>
 d4a:	ee 0f       	add	r30, r30
 d4c:	ff 1f       	adc	r31, r31
 d4e:	bb 1f       	adc	r27, r27
 d50:	66 1f       	adc	r22, r22
 d52:	77 1f       	adc	r23, r23
 d54:	88 1f       	adc	r24, r24
 d56:	91 50       	subi	r25, 0x01	; 1
 d58:	50 40       	sbci	r21, 0x00	; 0
 d5a:	a9 f7       	brne	.-22     	; 0xd46 <__mulsf3_pse+0x64>
 d5c:	9e 3f       	cpi	r25, 0xFE	; 254
 d5e:	51 05       	cpc	r21, r1
 d60:	70 f0       	brcs	.+28     	; 0xd7e <__mulsf3_pse+0x9c>
 d62:	5c cf       	rjmp	.-328    	; 0xc1c <__fp_inf>
 d64:	a6 cf       	rjmp	.-180    	; 0xcb2 <__fp_szero>
 d66:	5f 3f       	cpi	r21, 0xFF	; 255
 d68:	ec f3       	brlt	.-6      	; 0xd64 <__mulsf3_pse+0x82>
 d6a:	98 3e       	cpi	r25, 0xE8	; 232
 d6c:	dc f3       	brlt	.-10     	; 0xd64 <__mulsf3_pse+0x82>
 d6e:	86 95       	lsr	r24
 d70:	77 95       	ror	r23
 d72:	67 95       	ror	r22
 d74:	b7 95       	ror	r27
 d76:	f7 95       	ror	r31
 d78:	e7 95       	ror	r30
 d7a:	9f 5f       	subi	r25, 0xFF	; 255
 d7c:	c1 f7       	brne	.-16     	; 0xd6e <__mulsf3_pse+0x8c>
 d7e:	fe 2b       	or	r31, r30
 d80:	88 0f       	add	r24, r24
 d82:	91 1d       	adc	r25, r1
 d84:	96 95       	lsr	r25
 d86:	87 95       	ror	r24
 d88:	97 f9       	bld	r25, 7
 d8a:	08 95       	ret

00000d8c <__udivmodsi4>:
 d8c:	a1 e2       	ldi	r26, 0x21	; 33
 d8e:	1a 2e       	mov	r1, r26
 d90:	aa 1b       	sub	r26, r26
 d92:	bb 1b       	sub	r27, r27
 d94:	fd 01       	movw	r30, r26
 d96:	0d c0       	rjmp	.+26     	; 0xdb2 <__udivmodsi4_ep>

00000d98 <__udivmodsi4_loop>:
 d98:	aa 1f       	adc	r26, r26
 d9a:	bb 1f       	adc	r27, r27
 d9c:	ee 1f       	adc	r30, r30
 d9e:	ff 1f       	adc	r31, r31
 da0:	a2 17       	cp	r26, r18
 da2:	b3 07       	cpc	r27, r19
 da4:	e4 07       	cpc	r30, r20
 da6:	f5 07       	cpc	r31, r21
 da8:	20 f0       	brcs	.+8      	; 0xdb2 <__udivmodsi4_ep>
 daa:	a2 1b       	sub	r26, r18
 dac:	b3 0b       	sbc	r27, r19
 dae:	e4 0b       	sbc	r30, r20
 db0:	f5 0b       	sbc	r31, r21

00000db2 <__udivmodsi4_ep>:
 db2:	66 1f       	adc	r22, r22
 db4:	77 1f       	adc	r23, r23
 db6:	88 1f       	adc	r24, r24
 db8:	99 1f       	adc	r25, r25
 dba:	1a 94       	dec	r1
 dbc:	69 f7       	brne	.-38     	; 0xd98 <__udivmodsi4_loop>
 dbe:	60 95       	com	r22
 dc0:	70 95       	com	r23
 dc2:	80 95       	com	r24
 dc4:	90 95       	com	r25
 dc6:	9b 01       	movw	r18, r22
 dc8:	ac 01       	movw	r20, r24
 dca:	bd 01       	movw	r22, r26
 dcc:	cf 01       	movw	r24, r30
 dce:	08 95       	ret

00000dd0 <__tablejump2__>:
 dd0:	ee 0f       	add	r30, r30
 dd2:	ff 1f       	adc	r31, r31
 dd4:	00 24       	eor	r0, r0
 dd6:	00 1c       	adc	r0, r0
 dd8:	0b be       	out	0x3b, r0	; 59
 dda:	07 90       	elpm	r0, Z+
 ddc:	f6 91       	elpm	r31, Z
 dde:	e0 2d       	mov	r30, r0
 de0:	09 94       	ijmp

00000de2 <__umulhisi3>:
 de2:	a2 9f       	mul	r26, r18
 de4:	b0 01       	movw	r22, r0
 de6:	b3 9f       	mul	r27, r19
 de8:	c0 01       	movw	r24, r0
 dea:	a3 9f       	mul	r26, r19
 dec:	70 0d       	add	r23, r0
 dee:	81 1d       	adc	r24, r1
 df0:	11 24       	eor	r1, r1
 df2:	91 1d       	adc	r25, r1
 df4:	b2 9f       	mul	r27, r18
 df6:	70 0d       	add	r23, r0
 df8:	81 1d       	adc	r24, r1
 dfa:	11 24       	eor	r1, r1
 dfc:	91 1d       	adc	r25, r1
 dfe:	08 95       	ret

00000e00 <_exit>:
 e00:	f8 94       	cli

00000e02 <__stop_program>:
 e02:	ff cf       	rjmp	.-2      	; 0xe02 <__stop_program>
